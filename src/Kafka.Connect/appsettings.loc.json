{
  "worker": {
    "name": "test-worker-node",
    "allowAutoCreateTopics": true,
    "bootstrapServers": "127.0.0.1:9093",
    "securityProtocol": "PlainText",
    "sslCaLocation": "",
    "sslCertificateLocation": "",
    "sslKeyLocation": "",
    "sslKeyPassword": "",
    "enableAutoCommit": true,
    "enableAutoOffsetStore": false,
    "enablePartitionEof": true,
    "fetchWaitMaxMs": 50,
    "partitionAssignmentStrategy": "RoundRobin",
    "autoOffsetReset": "earliest",
    "isolationLevel": "ReadUncommitted",
    "topics": {
      "connector-config-topic": { "purpose":  "config"},
      "__kafka_connect_dotnet_command": { "purpose":  "command" }
    },
    "schemaRegistry": {
      "connectionTimeoutMs": 5000,
      "maxCachedSchemas": 10,
      "url": "http://schema-registry:8081"
    },
    "healthCheck": {
      "disabled": true,
      "initialDelayMs": 10000,
      "periodicDelayMs": 50000
    },
    "failOver": {
      "disabled": false,
      "failureThreshold": 3,
      "initialDelayMs": 600,
      "periodicDelayMs": 20000,
      "restartDelayMs": 20000
    },
    "restarts": {
      "enabled": "Worker,Connector",
      "attempts": 5,
      "periodicDelayMs": 500,
      "stopOnFailure": true
    },
    "faultTolerance": {
      "batches": {
        "size": 100,
        "parallelism": 1,
        "interval": 10000,
        "poll": 1000
      },
      "retries": {
        "attempts": 3,
        "interval": 1000
      },
      "errors": {
        "tolerance": "All"
      },
      "eof": {
        "enabled": false
      }
    },
    "converters": {
      "key": "Kafka.Connect.Converters.JsonConverter",
      "value": "Kafka.Connect.Converters.JsonConverter"
    },
    "plugins": {
      "location": "/Users/picardro/Github/external/roshan-picardo/kafka-connect-dotnet/app/bin/plugins/",
      "initializers": {
        "mongodb": {
          "prefix": "mongodb",
          "assembly": "Kafka.Connect.MongoDb.dll",
          "class": "Kafka.Connect.MongoDb.DefaultPluginInitializer"
        },
        "postgres": {
          "prefix": "postgres",
          "assembly": "Kafka.Connect.Postgres.dll",
          "class": "Kafka.Connect.Postgres.DefaultPluginInitializer"
        },
        "sqlserver": {
          "prefix": "sqlserver",
          "assembly": "Kafka.Connect.SqlServer.dll",
          "class": "Kafka.Connect.SqlServer.DefaultPluginInitializer"
        },
        "oracle": {
          "prefix": "oracle",
          "assembly": "Kafka.Connect.Oracle.dll",
          "class": "Kafka.Connect.Oracle.DefaultPluginInitializer"
        },
        "mysql": {
          "prefix": "mysql",
          "assembly": "Kafka.Connect.MySql.dll",
          "class": "Kafka.Connect.MySql.DefaultPluginInitializer"
        }
      }
    },
    "connectors": {
      "test-mongo-local": {
        "groupId": "test-mongo-local",
        "topics": ["mongodb-sink-data-topic"],
        "tasks": 1,
        "paused": false,
        "disabled": false,
        "processors": {
          "1": {
            "name": "Kafka.Connect.Processors.WhitelistFieldProjector",
            "settings":   [
              "id",
              "name",
              "email",
              "status",
              "created_at"
            ]
          },
          "2": {
            "name": "Kafka.Connect.Processors.FieldRenamer",
            "settings": {
              "created_at": "last_updated"
            }
          }
        },
        "plugin": {
          "type": "sink",
          "name": "mongodb",
          "handler": "Kafka.Connect.MongoDb.MongoPluginHandler",
          "strategy": {
            "Name": "Kafka.Connect.MongoDb.Strategies.UpsertStrategy"
          },
          "properties":{
            "connectionUri": "mongodb://admin:admin@127.0.0.1:27017",
            "database": "test-mongo-database",
            "collection": "test-mongo-collection",
            "filter": "{\"id\": \"%id%\"}"
          }
        },
        "log": {
          "provider": "",
          "attributes": [
            "timestamp",
            "operation",
            "after.id",
            "after.name",
            "id",
            "name"
          ]
        }
      }
    }
  }
}