{
  "Logging": {
    "LogLevel": {
      "Default": "Error",
      "Microsoft": "Error",
      "Microsoft.Hosting.Lifetime": "Error"
    }
  },
  "Serilog": {
    "MinimumLevel": {
      "Default": "Information",
      "override": {
        "System": "Information",
        "Microsoft": "Error",
        "Microsoft.Hosting.Lifetime": "Error",
        "Kafka.Connect.Plugin.Models.SinkRecord": "Information",
        "Kafka.Connect.Builders.KafkaClientBuilder": "6"
      }
    },
    "WriteTo": [
      {
        "Name": "Console",
        "Args": {
          "formatter": "Serilog.Formatting.Json.JsonFormatter, Serilog"
        }
      }
    ],
    "Enrich": [
      "FromLogContext"
    ]
  },
  "AllowedHosts": "*",
  "worker": {
    "bootstrapServers": "localhost:9092",
    "securityProtocol": "PlainText",
    "sslCaLocation": "",
    "sslCertificateLocation": "",
    "sslKeyLocation": "",
    "sslKeyPassword": "",
    "enableAutoCommit": true,
    "enableAutoOffsetStore": false,
    "enablePartitionEof": true,
    "fetchWaitMaxMs": 5,
    "partitionAssignmentStrategy": "RoundRobin",
    "autoOffsetReset": "earliest",
    "schemaRegistry": {
      "connectionTimeoutMs": 5000,
      "maxCachedSchemas": 10,
      "url": "http://localhost:33000"
    },
    "errors": {
      "tolerance": "None",
      "deadLetter": {
        "topic": "my_dead_letter_queue"
      },
      "enableLog": true
    },
    "healthCheck": {
      "enabled": true,
      "initialDelaySeconds": 60,
      "periodSeconds": 60
    },
    "selfHealing": {
      "attempts": 10,
      "delayTimeoutMs": 5000
    },
    "failOver": {
      "enabled": true,
      "threshold": 3,
      "delayMs": 2000,
      "timeoutMs": 20000
    },
    "healthWatch": {
      "healthCheck": {
        "disabled": true,
        "initialDelayMs": 10000,
        "periodicDelayMs": 10000
      },
      "failOver": {
        "disabled": true,
        "failureThreshold": 3,
        "initialDelayMs": 60,
        "periodicDelayMs": 20,
        "restartDelayMs": 20
      },
      "restarts": { 
        "enabled": "Worker,Connector",
        "attempts": 5,
        "periodicDelayMs": 500,
        "stopOnFailure": true
      },
      "errors": {
        "tolerance": "All",
        "topic": ""
      }
    },
    "plugins": {
      "consent-plugin": {
        "name": "default-mongodb",
        "directory": "plugins/mongodb",
        "initializers": [
          {
            "assembly": "Kafka.Connect.Mongodb",
            "type": "Kafka.Connect.Mongodb.Collections.DefaultPluginInitializer"
          }
        ]
      }
    },
    "shared": {
      "errors": {
        "tolerance": "All",
        "topic": ""
      },
      "retries": {
        "attempts": 3,
        "delayTimeoutMs": 1000
      },
      "deserializers": {
        "key": "Kafka.Connect.Serializers.IgnoreDeserializer",
        "value": "Kafka.Connect.Serializers.AvroDeserializer"
      },
      "batch": {
        "size": 1,
        "parallelism": 1
      }
    },
    "connectors": {
      "loc-entitlements-consent-sink-connector": {
        "name": "loc-entitlements-consent-sink-connector",
        "groupId": "attempt#04",
        "plugin": "default-mongodb",
        "topics": [
          "test-events-testing"
        ],
        "maxTasks": 1,
        "paused": false,
        "processors": {
          "json-field": {
            "name": "Kafka.Connect.Processors.JsonTypeOverrider",
            "order": 1,
            "settings": [
                "consentRequest.relatedOperation.data"
              ]
          },
          "datetime-field": {
            "name": "Kafka.Connect.Processors.DateTimeTypeOverrider",
            "order": 2,
            "settings":{
              "modifiedDate": null
            }
          },
          "cif-locate": {
            "name": "Entitlements.Consent.Sink.Connector.Processors.CustomerIdLocator",
            "order": 3,
            "settings": {
              "number": 1,
              "text": "hi-hello"
            }
          },
          "whitelist": {
            "name": "Kafka.Connect.Processors.WhitelistFieldProjector",
            "order": 4,
            "settings":  [
                "consentId",
                "consentType",
                "status",
                "consentLifeTimeExpiryDate",
                "actionType",
                "customerId",
                "dependsOnConsent.consentId",
                "consentRequest.relatedOperation.data.clientId",
                "consentRequest.relatedOperation.data.scopes[*]",
                "consentRequest.relatedOperation.data.accountNumber",
                "consentRequest.relatedOperation.data.externalAccountId",
                "consentRequest.relatedOperation.data.productCode",
                "consentRequest.relatedOperation.data.accountNumberHash",
                "consentRequest.relatedOperation.data.accountOwnerCifCode",
                "consentRequest.relatedOperation.data.profileCifCode",
                "consentRequest.relatedOperation.data.profileType",
                "consentRequest.relatedOperation.data.electionType",
                "consentRequest.relatedOperation.data.providerId",
                "involvedUsers[*]",
                "modifiedDate",
                "brandCode",
                "consentRequest.relatedOperation.data.accountId",
                "consentRequest.relatedOperation.data.accountOwnerGroupCustomerUuid",
                "consentRequest.relatedOperation.data.profileGroupCustomerUuid",
                "consentRequest.relatedOperation.data.customerId"
              ]
          },
          "rename": {
            "name": "Kafka.Connect.Processors.FieldRenamer",
            "order": 5,
            "settings": {
              "consentRequest.relatedOperation.data.clientId": "clientId",
              "consentLifeTimeExpiryDate": "expiryDate",
              "consentRequest.relatedOperation.data.scopes[*]": "scopes[*]",
              "consentRequest.relatedOperation.data.accountNumber": "internalAccountNumber",
              "consentRequest.relatedOperation.data.externalAccountId": "externalAccountNumber",
              "consentRequest.relatedOperation.data.productCode": "productType",
              "consentRequest.relatedOperation.data.accountNumberHash": "accountNumberHash",
              "dependsOnConsent.consentId": "dependsOnConsentId",
              "consentRequest.relatedOperation.data.accountOwnerCifCode": "accountOwnerCifCode",
              "consentRequest.relatedOperation.data.profileCifCode": "profileCifCode",
              "consentRequest.relatedOperation.data.profileType": "profileType",
              "consentRequest.relatedOperation.data.electionType": "electionType",
              "consentRequest.relatedOperation.data.providerId": "providerId",
              "modifiedDate": "timestamp",
              "consentRequest.relatedOperation.data.accountId": "internalAccountId",
              "consentRequest.relatedOperation.data.accountOwnerGroupCustomerUuid": "accountOwnerCustomerUuid",
              "consentRequest.relatedOperation.data.profileGroupCustomerUuid": "profileCustomerUuid"
            }
          }
        },
        "sink": {
          "handler": "Kafka.Connect.Mongodb.MongodbSinkHandler",
          "properties": {
            "connectionUri": "mongodb://localhost:27017",
            "database": "client_entitlement_loc",
            "collection": "ConsentCollection",
            "writeStrategy": {
              "name": "Kafka.Connect.Mongodb.Strategies.DefaultWriteModelStrategy",
              "selector": "Kafka.Connect.Mongodb.Strategies.WriteModelStrategyProvider",
              "isWriteOrdered": true
            }
          }
        }
      }
    }
  }
}