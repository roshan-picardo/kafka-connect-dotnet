{
  "Logging": {
    "LogLevel": {
      "Default": "Error",
      "Microsoft": "Error",
      "Microsoft.Hosting.Lifetime": "Error"
    }
  },
  "Serilog": {
    "MinimumLevel": {
      "Default": "Information",
      "override": {
        "System": "Warning",
        "Microsoft": "Error",
        "Microsoft.Hosting.Lifetime": "Error",
        "Kafka.Connect.Plugin.Logging.ConnectLog": "Information"
      }
    },
    "WriteTo": [
      {
        "Name": "Console",
        "Args": {
          "formatter": "Serilog.Formatting.Json.JsonFormatter, Serilog"
        }
      }
    ],
    "Enrich": [
      "FromLogContext"
    ]
  },
  "AllowedHosts": "*",
  "urls": "http://localhost:6000/", 
  "worker": {
    "trace": false,
    "transactionalId": "my-transactions",
    "allowAutoCreateTopics": true,
    "bootstrapServers": "localhost:9092",
    "securityProtocol": "PlainText",
    "sslCaLocation": "",
    "sslCertificateLocation": "",
    "sslKeyLocation": "",
    "sslKeyPassword": "",
    "enableAutoCommit": true,
    "enableAutoOffsetStore": false,
    "enablePartitionEof": true,
    "fetchWaitMaxMs": 50,
    "partitionAssignmentStrategy": "RoundRobin",
    "autoOffsetReset": "earliest",
    "isolationLevel": "ReadUncommitted",
    "topics": {
      "connector-config-topic": { "purpose":  "config"},
      "__kafka_connect_dotnet_command": { "purpose":  "command" }
    },
    "schemaRegistry": {
      "connectionTimeoutMs": 5000,
      "maxCachedSchemas": 10,
      "url": "http://localhost:28081"
    },
    "healthCheck": {
      "disabled": true,
      "initialDelayMs": 10000,
      "periodicDelayMs": 50000
    },
    "failOver": {
      "disabled": false,
      "failureThreshold": 3,
      "initialDelayMs": 600,
      "periodicDelayMs": 20000,
      "restartDelayMs": 20000
    },
    "restarts": {
      "enabled": "Worker,Connector",
      "attempts": 5,
      "periodicDelayMs": 500,
      "stopOnFailure": true
    },
    "batches": {
      "size": 100,
      "parallelism": 50,
      "timeoutInMs": 10000,
      "retries": {
        "attempts": 3,
        "timeoutInMs": 1000,
        "errors": {
          "tolerance": "All"
        }
      },
      "eofSignal": {
        "enabled": true,
        "topic": ""
      }
    },
    "converters": {
      "key": "Kafka.Connect.Converters.JsonConverter",
      "value": "Kafka.Connect.Converters.JsonConverter"
    },
    "retries": {
      "attempts": 3,
      "delayTimeoutMs": 1000,
      "errors": {
        "tolerance": "All"
      }
    },
    "plugins": {
      "location": "/Users/picardro/Github/external/roshan-picardo/kafka-connect-dotnet/app/bin/plugins/",
      "initializers": {
        "default-mongodb": {
          "prefix": "mongodb",
          "assembly": "Kafka.Connect.MongoDb.dll",
          "class": "Kafka.Connect.MongoDb.DefaultPluginInitializer"
        },
        "default-postgres": {
          "prefix": "postgres",
          "assembly": "Kafka.Connect.Postgres.dll",
          "class": "Kafka.Connect.Postgres.DefaultPluginInitializer"
        }
      }
    },
    "settings": "/Users/picardro/Github/external/roshan-picardo/kafka-connect-dotnet/settings/",
    "connectors": {
      "loc-entitlements-consent-sink-connector-md": {
        "type": "source",
        "groupId": "loc-entitlements-consent-sink-connector-md-attempt#31",
        "topics": [],
        "tasks": 1,
        "paused": false,
        "plugin": {
          "type": "source",
          "name": "default-postgres",
          "handler": "Kafka.Connect.Postgres.PostgresPluginHandler",
          "strategy": {
            "name": "Kafka.Connect.Postgres.Strategies.ReadStrategy"
          },
          "properties":{
            "host": "localhost",
            "password": "postgres",
            "table": "consent",
            "userId": "postgres",
            "connectionUri": "mongodb://localhost:27017",
            "database": "entitlements",
            "condition": "type={type}",
            "filters": {
              "key1": 111,
              "key2": 222
            },
            "changelog": {
              "table": "connect_audit_logs"
            },
            "commands": {
              "customers-data-topic-updated-2": {
                "topic": "test-customer-data",
                "table": "customer",
                "keys": ["id"],
                "filters": {
                  "keys": ["updated", "id"],
                  "values": {
                    "updated": 100,
                    "id": 12
                  }
                },
                "snapshot": {
                  "enabled": true,
                  "key": "id",
                  "total": 0,
                  "id": 0
                }
              }
            }
          }
        },
        "log": {
          "provider": "",
          "attributes": [
            "timestamp",
            "operation",
            "after.id",
            "after.name"
          ]
        }
      },
      "loc-sink-connector-postgres": {
        "groupId": "loc-sink-connector-postgres",
        "topics": ["test-customer-data"],
        "tasks": 1,
        "paused": false,
        "processors": {
          "1": {
            "name": "Kafka.Connect.Processors.WhitelistFieldProjector",
            "settings":   [
              "after.id",
              "after.name",
              "after.age",
              "after.poscode"
            ]
          },
          "5": {
            "name": "Kafka.Connect.Processors.FieldRenamer",
            "settings": {
              "after.id": "id",
              "after.name": "name",
              "after.age": "age",
              "after.poscode": "postcode"
            }
          }
        },
        "plugin": {
          "type": "sink",
          "name": "default-postgres",
          "handler": "Kafka.Connect.Postgres.PostgresPluginHandler",
          "strategy": {
            "name": "Kafka.Connect.Postgres.Strategies.DeleteStrategy"
          },
          "properties":{
            "host": "localhost",
            "password": "postgres",
            "table": "consent",
            "userId": "postgres",
            "database": "entitlements",
            "filter": "id={id}"
          }
        },
        "log": {
          "provider": "",
          "attributes": [
            "timestamp",
            "operation",
            "after.id",
            "after.name",
            "id",
            "name"
          ]
        }
      }
    }
  }
}